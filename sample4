import { Component, OnInit } from '@angular/core';
import {
  ApexAxisChartSeries,
  ApexChart,
  ApexXAxis,
  ApexDataLabels,
  ApexStroke,
  ApexTitleSubtitle,
  ApexLegend
} from 'ng-apexcharts';
import * as rawData from '../../assets/generated_records.json';

export type ChartOptions = {
  series: ApexAxisChartSeries;
  chart: ApexChart;
  xaxis: ApexXAxis;
  dataLabels: ApexDataLabels;
  stroke: ApexStroke;
  title: ApexTitleSubtitle;
  legend: ApexLegend;
};

@Component({
  selector: 'app-event-chart',
  templateUrl: './event-chart.component.html',
  styleUrls: ['./event-chart.component.css']
})
export class EventChartComponent implements OnInit {
  public chartOptions: Partial<ChartOptions>;

  constructor() {}

  ngOnInit(): void {
    const grouped = this.processData((rawData as any).default);
    const categories = Array.from(new Set(grouped.map((item: any) => item.time))).sort();

    const types = Array.from(
      new Set(grouped.flatMap((item: any) => Object.keys(item.counts)))
    );

    const series = types.map(type => ({
      name: type,
      data: categories.map(time => {
        const item = grouped.find(i => i.time === time);
        return item?.counts[type] || 0;
      })
    }));

    this.chartOptions = {
      series,
      chart: {
        height: 400,
        type: 'line',
        zoom: {
          enabled: true,
          type: 'x',
          autoScaleYaxis: true
        },
        toolbar: {
          show: true,
          autoSelected: 'zoom',
          tools: {
            download: true,
            selection: true,
            zoom: true,
            zoomin: true,
            zoomout: true,
            pan: true,
            reset: true
          },
          export: {
            csv: {
              filename: 'event-type-data',
              columnDelimiter: ',',
              headerCategory: 'Interval',
              headerValue: 'Count'
            },
            svg: {
              filename: 'event-type-linechart'
            },
            png: {
              filename: 'event-type-linechart'
            }
          }
        }
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        curve: 'smooth'
      },
      title: {
        text: 'Event Types per 5 Minute Interval',
        align: 'left'
      },
      xaxis: {
        categories
      },
      legend: {
        position: 'top'
      }
    };
  }

  processData(data: any[]): { time: string; counts: { [key: string]: number } }[] {
    const grouped = new Map<string, { [key: string]: number }>();

    data.forEach(event => {
      const date = new Date(event.event_time);
      const intervalMs = 5 * 60 * 1000;
      const rounded = new Date(Math.floor(date.getTime() / intervalMs) * intervalMs);
      const timeKey = `${rounded.getFullYear()}-${String(rounded.getMonth() + 1).padStart(2, '0')}-${String(rounded.getDate()).padStart(2, '0')} ${String(rounded.getHours()).padStart(2, '0')}:${String(rounded.getMinutes()).padStart(2, '0')}`;

      const type = event.meta_data?.type ?? 'UNKNOWN';
      const counts = grouped.get(timeKey) || {};
      counts[type] = (counts[type] || 0) + 1;
      grouped.set(timeKey, counts);
    });

    return Array.from(grouped.entries())
      .map(([time, counts]) => ({ time, counts }))
      .sort((a, b) => a.time.localeCompare(b.time));
  }
}
