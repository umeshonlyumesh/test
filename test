package com.truist.fraud.autoconfiguration;

import com.truist.cps.connector.RestConnector;
import com.truist.cps.connector.RestConnectorFactory;
import com.truist.fraud.client.FraudClient;
import com.truist.fraud.config.FraudProperties;
import com.truist.fraud.service.FraudServiceImpl;
import com.truist.fraud.util.TokenizationUtil;
import com.github.jknack.handlebars.Handlebars;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.autoconfigure.AutoConfigurations;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * âœ… Final version â€” no @MockBean, no duplicate FraudProperties, Boot 3.x safe.
 */
@ExtendWith(MockitoExtension.class)
class FraudServiceImplAutoConfigurationTest {

    private ApplicationContextRunner contextRunner;

    @BeforeEach
    void setup() {
        // ðŸ‘‡ This runner loads *only* our local config + target auto-config.
        contextRunner = new ApplicationContextRunner()
                .withUserConfiguration(TestOnlyConfig.class)
                .withConfiguration(AutoConfigurations.of(FraudServiceImplAutoConfiguration.class));
    }

    @Configuration
    static class TestOnlyConfig {

        @Bean
        FraudProperties fraudProperties() {
            FraudProperties props = new FraudProperties();
            props.setUsername("testUser");
            props.setPassword("testPass");
            props.setBaseUrl("https://fraud.api.dev");
            props.setFraudTemplatePath("src/test/resources/templates");
            props.setFraudTemplateName("fraud-template");
            props.setMtlsEnabled(false);
            return props;
        }
    }

    @Test
    void shouldCreateFraudClient_whenMtlsDisabled() {
        try (MockedStatic<RestConnectorFactory> factoryMock =
                     mockStatic(RestConnectorFactory.class)) {

            RestConnector mockConnector = mock(RestConnector.class);
            factoryMock.when(() ->
                    RestConnectorFactory.createBasicAuthConnector(
                            anyString(), anyString(), anyString()))
                    .thenReturn(mockConnector);

            contextRunner.run(context -> {
                assertThat(context).hasSingleBean(FraudClient.class);
                FraudClient fraudClient = context.getBean(FraudClient.class);
                assertThat(fraudClient).isNotNull();

                factoryMock.verify(() ->
                        RestConnectorFactory.createBasicAuthConnector(
                                eq("testUser"), eq("testPass"), eq("https://fraud.api.dev")));
            });
        }
    }

    @Test
    void shouldCreateOtherBeansSuccessfully() {
        contextRunner.run(context -> {
            assertThat(context).hasSingleBean(Handlebars.class);
            assertThat(context).hasSingleBean(TokenizationUtil.class);
            assertThat(context).hasSingleBean(FraudServiceImpl.class);
        });
    }
}