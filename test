package com.truist.fraud.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.truist.fraud.client.FraudClient;
import com.truist.fraud.model.*;
import com.truist.fraud.util.TokenizationUtil;
import com.truist.sdk.exception.SdkException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;
import freemarker.template.Template;

import java.net.SocketTimeoutException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FraudServiceImplTest {

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private FraudClient fraudClient;

    @Mock
    private Template template;

    @Mock
    private TokenizationUtil tokenizationUtil;

    @InjectMocks
    private FraudServiceImpl fraudService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void execute_shouldReturnSuccessResponse_whenFraudClientSucceeds() throws Exception {
        // given
        FraudRequest fraudRequest = new FraudRequest();
        fraudRequest.setParameters(List.of(
                new Parameter("TRX_MONITORED_ACCOUNT_NUMBER", "1111"),
                new Parameter("transactionKey", "TXN123")
        ));

        // Mock tokenization behavior
        when(tokenizationUtil.detokenize(anyList()))
                .thenReturn(List.of("DETOK-1111"));

        // Mock template render
        when(template.apply(any())).thenReturn("{ \"sample\": \"json\" }");

        // Mock objectMapper to parse clean JSON into IfmxRequest
        IfmxRequest ifmxRequest = new IfmxRequest();
        when(objectMapper.readValue(anyString(), eq(IfmxRequest.class)))
                .thenReturn(ifmxRequest);

        // Mock FraudClient API success
        RestResponse<FraudResponse> mockRestResponse = new RestResponse<>();
        mockRestResponse.setBody(new FraudResponse("0", "SUCCESS"));
        mockRestResponse.setSuccessful(true);

        when(fraudClient.invokeApi(any(IfmxRequest.class)))
                .thenReturn(mockRestResponse);

        // when
        FraudResponse result = fraudService.execute(fraudRequest);

        // then
        assertNotNull(result);
        assertEquals("SUCCESS", result.getMessage());
        assertEquals("0", result.getReturnCode());
        verify(fraudClient, times(1)).invokeApi(any(IfmxRequest.class));
    }

    @Test
    void execute_shouldThrowSdkException_whenFraudClientFails() throws Exception {
        // given
        FraudRequest fraudRequest = new FraudRequest();
        fraudRequest.setParameters(List.of(
                new Parameter("TRX_MONITORED_ACCOUNT_NUMBER", "2222")
        ));

        when(tokenizationUtil.detokenize(anyList()))
                .thenReturn(List.of("DETOK-2222"));

        when(template.apply(any())).thenReturn("{ \"sample\": \"json\" }");
        when(objectMapper.readValue(anyString(), eq(IfmxRequest.class)))
                .thenReturn(new IfmxRequest());

        // Mock FraudClient API failure
        RestResponse<FraudResponse> errorResponse = new RestResponse<>();
        errorResponse.setSuccessful(false);
        errorResponse.setBody(new FraudResponse("4", "FAIL"));
        when(fraudClient.invokeApi(any())).thenReturn(errorResponse);

        // when + then
        assertThrows(SdkException.class, () -> fraudService.execute(fraudRequest));
    }

    @Test
    void execute_shouldThrowTimeoutException() throws Exception {
        // given
        FraudRequest fraudRequest = new FraudRequest();
        fraudRequest.setParameters(List.of(new Parameter("TRX_MONITORED_ACCOUNT_NUMBER", "3333")));

        when(tokenizationUtil.detokenize(anyList()))
                .thenReturn(List.of("DETOK-3333"));
        when(template.apply(any())).thenReturn("{ \"sample\": \"json\" }");
        when(objectMapper.readValue(anyString(), eq(IfmxRequest.class)))
                .thenReturn(new IfmxRequest());

        // Mock a timeout
        when(fraudClient.invokeApi(any())).thenThrow(new SocketTimeoutException("Timeout"));

        // when + then
        assertThrows(SdkException.class, () -> fraudService.execute(fraudRequest));
    }
}