package com.truist.fraud.autoconfiguration;

import com.truist.cps.connector.RestConnector;
import com.truist.cps.connector.RestConnectorFactory;
import com.truist.fraud.client.FraudClient;
import com.truist.fraud.config.FraudProperties;
import com.truist.fraud.service.FraudServiceImpl;
import com.truist.fraud.util.TokenizationUtil;
import com.github.jknack.handlebars.Handlebars;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.context.annotation.Import;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * Stable test for FraudServiceImplAutoConfiguration that avoids duplicate FraudProperties beans.
 */
@ExtendWith(MockitoExtension.class)
@Import(FraudServiceImplAutoConfiguration.class)
class FraudServiceImplAutoConfigurationTest {

    private ApplicationContextRunner contextRunner;

    @BeforeEach
    void setup() {
        // Minimal context runner that isolates our test config only
        contextRunner = new ApplicationContextRunner()
                .withPropertyValues("spring.main.allow-bean-definition-overriding=true");
    }

    @Test
    void shouldCreateFraudClient_whenMtlsDisabled() {
        FraudProperties props = new FraudProperties();
        props.setUsername("testUser");
        props.setPassword("testPass");
        props.setBaseUrl("https://fraud.api.dev");
        props.setFraudTemplatePath("src/test/resources/templates");
        props.setFraudTemplateName("fraud-template");
        props.setMtlsEnabled(false);

        try (MockedStatic<RestConnectorFactory> factoryMock = mockStatic(RestConnectorFactory.class)) {
            RestConnector mockConnector = mock(RestConnector.class);
            factoryMock.when(() ->
                    RestConnectorFactory.createBasicAuthConnector(
                            anyString(), anyString(), anyString()))
                    .thenReturn(mockConnector);

            contextRunner
                    // Register only our FraudProperties manually; disables the auto-config copy
                    .withBean("testFraudProperties", FraudProperties.class, () -> props)
                    .withUserConfiguration(FraudServiceImplAutoConfiguration.class)
                    .run(context -> {
                        FraudClient fraudClient = context.getBean(FraudClient.class);
                        assertThat(fraudClient).isNotNull();

                        // Verify that the correct factory method was called
                        factoryMock.verify(() ->
                                RestConnectorFactory.createBasicAuthConnector(
                                        eq("testUser"), eq("testPass"), eq("https://fraud.api.dev")));
                    });
        }
    }

    @Test
    void shouldCreateFraudClient_whenMtlsEnabled() {
        FraudProperties props = new FraudProperties();
        props.setUsername("testUser");
        props.setPassword("testPass");
        props.setBaseUrl("https://fraud.api.dev");
        props.setKeyStorePath("classpath:keystore.jks");
        props.setKeyStorePassword("secret");
        props.setTrustStorePath("classpath:truststore.jks");
        props.setTrustStorePassword("secret");
        props.setMtlsEnabled(true);

        try (MockedStatic<RestConnectorFactory> factoryMock = mockStatic(RestConnectorFactory.class)) {
            RestConnector mockConnector = mock(RestConnector.class);
            factoryMock.when(() ->
                    RestConnectorFactory.createBasicAuthConnector(
                            anyString(), anyString(), anyString(), any()))
                    .thenReturn(mockConnector);

            contextRunner
                    .withBean("testFraudProperties", FraudProperties.class, () -> props)
                    .withUserConfiguration(FraudServiceImplAutoConfiguration.class)
                    .run(context -> {
                        FraudClient fraudClient = context.getBean(FraudClient.class);
                        assertThat(fraudClient).isNotNull();

                        factoryMock.verify(() ->
                                RestConnectorFactory.createBasicAuthConnector(
                                        eq("testUser"), eq("testPass"), eq("https://fraud.api.dev"), any()));
                    });
        }
    }

    @Test
    void shouldCreateOtherBeansSuccessfully() {
        FraudProperties props = new FraudProperties();
        props.setUsername("testUser");
        props.setPassword("testPass");
        props.setBaseUrl("https://fraud.api.dev");
        props.setFraudTemplatePath("src/test/resources/templates");
        props.setFraudTemplateName("fraud-template");
        props.setMtlsEnabled(false);

        contextRunner
                .withBean("testFraudProperties", FraudProperties.class, () -> props)
                .withUserConfiguration(FraudServiceImplAutoConfiguration.class)
                .run(context -> {
                    assertThat(context).hasSingleBean(Handlebars.class);
                    assertThat(context).hasSingleBean(TokenizationUtil.class);
                    assertThat(context).hasSingleBean(FraudServiceImpl.class);
                });
    }
}