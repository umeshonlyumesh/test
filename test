import { ComponentFixture, TestBed } from '@angular/core/testing';
import { CompanyEnrollmentComponent } from './company-enrollment.component';
import { AvsService } from '../services/avs.service';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

describe('CompanyEnrollmentComponent', () => {
  let component: CompanyEnrollmentComponent;
  let fixture: ComponentFixture<CompanyEnrollmentComponent>;
  let avsServiceSpy: jasmine.SpyObj<AvsService>;

  beforeEach(async () => {
    const avsSpy = jasmine.createSpyObj('AvsService', ['getCompanies', 'deleteCompany', 'addAuditLogs']);
    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);
    const authServiceSpy = jasmine.createSpyObj('AuthService', ['updateCapabilities']);

    await TestBed.configureTestingModule({
      imports: [MatTableModule, MatPaginatorModule, BrowserAnimationsModule],
      declarations: [CompanyEnrollmentComponent],
      providers: [
        { provide: AvsService, useValue: avsSpy },
        { provide: Router, useValue: routerSpy },
        { provide: AuthService, useValue: authServiceSpy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(CompanyEnrollmentComponent);
    component = fixture.componentInstance;
    avsServiceSpy = TestBed.inject(AvsService) as jasmine.SpyObj<AvsService>;
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should load company enrollments on init', () => {
    const mockData = { body: { data: [{ id: 1, clientName: 'Test' }] } };
    avsServiceSpy.getCompanies.and.returnValue(of(mockData));

    component.ngOnInit();

    expect(avsServiceSpy.getCompanies).toHaveBeenCalled();
    expect(component.companyEnrollments.length).toBe(1);
  });

  it('should delete company enrollment and reload', () => {
    const deleteResp = { body: {} };
    avsServiceSpy.deleteCompany.and.returnValue(of(deleteResp));
    avsServiceSpy.addAuditLogs.and.returnValue(of({}));

    component.secondaryClientId = '123';
    component.onDeleteConfirm();

    expect(avsServiceSpy.deleteCompany).toHaveBeenCalledWith('123');
    expect(avsServiceSpy.addAuditLogs).toHaveBeenCalled();
  });

  it('should filter results based on search input', () => {
    component.initialCompanyEnrollments = [
      { clientName: 'Alpha' },
      { clientName: 'Beta' }
    ];
    component.companySearchText = 'alpha';
    component.searchCompanyOnInput();
    expect(component.dataSource.data.length).toBe(1);
  });
});
