import { AfterViewInit, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { distinctUntilChanged } from 'rxjs/operators';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html'
})
export class RegistrationComponent implements OnInit, AfterViewInit {
  registrationForm!: FormGroup;
  isEditMode = false;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initForm();

    if (this.isEditMode) {
      // Populate for edit
      this.registrationForm.patchValue({
        fname: 'Alice',
        lname: 'Cooper',
        email: 'alice@example.com',
        password: 'secret',
        address: '100 Main St'
      });
    }
  }

  ngAfterViewInit(): void {
    if (!this.isEditMode) {
      // Subscribe AFTER view has initialized
      setTimeout(() => {
        this.registrationForm.get('fname')!.valueChanges
          .pipe(distinctUntilChanged())
          .subscribe(val => {
            this.registrationForm.get('lname')!.setValue(val, { emitEvent: false });
          });
      });
    }
  }

  initForm() {
    this.registrationForm = this.fb.group({
      fname: ['', Validators.required],
      lname: ['', Validators.required],
      email: ['', Validators.email],
      password: ['', Validators.required],
      address: ['']
    });
  }

  onSubmit(): void {
    console.log(this.registrationForm.getRawValue());
  }
}
