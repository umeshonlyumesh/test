import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-user-registration',
  templateUrl: './user-registration.component.html'
})
export class UserRegistrationComponent implements OnInit {
  registrationForm: FormGroup;
  isEditMode = false; // Set this based on route or action

  constructor(private fb: FormBuilder) {}

  ngOnInit() {
    this.initForm();

    if (this.isEditMode) {
      // Simulate existing user data for edit mode
      const existingUser = {
        fname: 'John',
        lname: 'Doe',
        email: 'john@example.com',
        password: '123456'
      };

      this.registrationForm.patchValue(existingUser);

      // Enable lname for editing
      this.registrationForm.get('lname')!.enable();
    } else {
      // Auto-copy fname to lname in create mode
      this.registrationForm.get('fname')!.valueChanges.subscribe(fnameVal => {
        this.registrationForm.get('lname')!.setValue(fnameVal, { emitEvent: false });
      });
    }
  }

  initForm() {
    this.registrationForm = this.fb.group({
      fname: ['', Validators.required],
      lname: [{ value: '', disabled: !this.isEditMode }],
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  onSubmit() {
    if (this.registrationForm.valid) {
      const formData = this.registrationForm.getRawValue();
      console.log(this.isEditMode ? 'Edited Data:' : 'New Registration:', formData);
    }
  }
}
